<!-- GXL (1.0) GINML extension 
     Document Type Definition 
     March, 2003,   revisited in June 2003, Agust 2004
copyright by 
       Andy Schuerr 
            Andy.Schuerr@unibw-muenchen.de 
       Susan Elliott Sim 
         simsuz@cs.utoronto.ca 
       Ric Holt 
         holt@plg.uwaterloo.ca 
       Andreas Winter 
         winter@uni-koblenz.de 

      Claudine Chaouiya, Aitor Gonzalez, Denis Thieffry 
      LGPD - Bioinformatics of Developmental regulatory networks 
      Universite	 de la Mediterranee 
      Faculte des Sciences de Luminy - Case 907 
      163, Avenue de Luminy 
      13288 MARSEILLE CEDEX 09 - FRANCE 
      chaouiya@lgpd.univ-mrs.fr

       + ETUDIANTS DESS: F. Cordeil, T. Marcq, C. Menahem,  R. Muti, A. Naldi
             
      - an element node  has a new attributes name, basevalue and maxvalue and can contain:
          	a list of elements parameters, 
      	an annotation
      	a nodevisualsetting
      - an element edge has new attributes sign, minvalue, maxvalue and can contain:
      	an annotation
      	an edgevisulasetting
      - an element parameter is empty and has an attribute idActiveInteractions which is the references 
          of incoming edges, and an attribute val (default 0)
      - an element annotation can contain a linklist and a comment
      - an element nodevisualsetting can contain a point or a rect or an ellipse
      - an element edgevisualsetting can contain a polyline
      - an element linklist contains at least one link 
      - an element link is empty and has an attribute xlink with the appropriate URL
      - a comment contains a textual comment
      - elements polyline, rect, ellipse

       Version revised agust 2004 (C.Chaouiya)
       Note : for the moment we have defined extensions to deal with graphical layout and attributes. 
                   In a future work, we will define these graphical aspects in a separate format (use of GraphML or SVG formats) 
--> 
<!-- Extensions -->
<!ENTITY % gxl-extension "">
<!ENTITY % graph-extension "">
<!ENTITY % node-extension ",parameter*,annotation?,nodevisualsetting?">
<!ENTITY % edge-extension ",annotation?,edgevisualsetting?">
<!ENTITY % rel-extension "">
<!ENTITY % value-extension "">
<!ENTITY % relend-extension "">
<!ENTITY % gxl-attr-extension "">
<!ENTITY % graph-attr-extension "class (regulatory|dynamical|cellular) 'regulatory'
                                                              nodeorder NMTOKENS #IMPLIED">
<!ENTITY % node-attr-extension "name CDATA #IMPLIED basevalue CDATA '0' maxvalue CDATA '1'">
<!ENTITY % edge-attr-extension "sign (positive|negative|unknown) 'positive' minvalue CDATA '1' maxvalue CDATA '1'">
<!ENTITY % rel-attr-extension "">
<!ENTITY % relend-attr-extension "">

<!-- Graphical extension inspired from SVG format --> 
<!ENTITY % graphical-attr-extension "x CDATA #REQUIRED 
					 y CDATA #REQUIRED 
					 width CDATA #REQUIRED 
					 height CDATA #REQUIRED 
					 backgroundColor CDATA #REQUIRED
					 foregroundColor CDATA #REQUIRED
"> 

<!-- Attribute values -->
<!ENTITY % val " 
           locator | 
           bool    | 
           int     | 
           float   | 
           string  | 
           enum    | 
           seq     | 
           set     | 
           bag     | 
           tup 
           %value-extension;">

<!-- gxl -->
<!ELEMENT gxl (graph* %gxl-extension;) >
<!ATTLIST gxl
	xmlns:xlink CDATA #FIXED "http://www.w3.org/1999/xlink"
	%gxl-attr-extension; 
>

<!-- type -->
<!ELEMENT type EMPTY>
<!ATTLIST type
	xlink:type (simple) #FIXED "simple"
	xlink:href CDATA #REQUIRED
>

<!-- graph -->
<!ELEMENT graph (type? , attr* , ( node | edge | rel )* %graph-extension;) >
<!ATTLIST graph
	id ID #REQUIRED
	role NMTOKEN #IMPLIED
	edgeids (true | false) "false"
	hypergraph (true | false) "false"
	edgemode (directed | undirected | defaultdirected | defaultundirected) "directed"
	%graph-attr-extension; 
>

<!-- node -->
<!ELEMENT node (type? , attr*, graph* %node-extension;) >
<!ATTLIST node
	id ID #REQUIRED
	%node-attr-extension; 
>

<!-- edge -->
<!ELEMENT edge (type?, attr*, graph* %edge-extension;) >
<!ATTLIST edge
	id ID #IMPLIED
	from IDREF #REQUIRED
	to IDREF #REQUIRED
	fromorder CDATA #IMPLIED
	toorder CDATA #IMPLIED
	isdirected (true | false) #IMPLIED
	%edge-attr-extension; 
>

<!-- rel -->
<!ELEMENT rel (type? , attr*, graph*, relend* %rel-extension;) >
<!ATTLIST rel
	id ID #IMPLIED
	isdirected (true | false) #IMPLIED
	%rel-attr-extension; 
>
<!-- relend -->
<!ELEMENT relend (attr* %relend-extension;) >
<!ATTLIST relend
	target IDREF #REQUIRED
	role NMTOKEN #IMPLIED
	direction (in | out | none) #IMPLIED
	startorder CDATA #IMPLIED
	endorder CDATA #IMPLIED
	%relend-attr-extension; 
>

<!-- parameter -->
<!ELEMENT parameter EMPTY>
<!ATTLIST parameter 
    	idActiveInteractions  IDREFS  #IMPLIED
	val CDATA "0"
>

<!-- Annotation --> 
<!ELEMENT annotation (linklist?,comment?)> 
<!ELEMENT linklist (link+)> 
<!ELEMENT comment (#PCDATA)> 
<!ELEMENT link EMPTY> 
<!ATTLIST link  
	xlink:href CDATA #REQUIRED 
> 

<!-- attr -->
<!ELEMENT attr (type?, attr*, (%val;))>
<!ATTLIST attr
	id ID #IMPLIED
	name NMTOKEN #REQUIRED
	kind NMTOKEN #IMPLIED
>
<!-- locator -->
<!ELEMENT locator EMPTY>
<!ATTLIST locator
	xlink:type (simple) #FIXED "simple"
	xlink:href CDATA #REQUIRED
>
<!-- atomic values -->
<!ELEMENT bool (#PCDATA)>
<!ELEMENT int (#PCDATA)>
<!ELEMENT float (#PCDATA)>
<!ELEMENT string (#PCDATA)>
<!-- enumeration value -->
<!ELEMENT enum (#PCDATA)>
<!-- composite values -->
<!ELEMENT seq (%val;)*>
<!ELEMENT set (%val;)*>
<!ELEMENT bag (%val;)*>
<!ELEMENT tup (%val;)*>
 

<!-- Graphical elements --> 

<!ELEMENT nodevisualsetting ((point|rect|ellipse)?)> 
 
<!ELEMENT edgevisualsetting (polyline?)> 

<!-- polyline --> 
<!ELEMENT polyline EMPTY> 
<!ATTLIST polyline 
 	points CDATA #REQUIRED
 	line_style CDATA #REQUIRED
 	line_color CDATA #REQUIRED
 	routage CDATA #REQUIRED
> 
<!-- rectangle -->
<!ELEMENT rect EMPTY> 
<!ATTLIST rect 
	%graphical-attr-extension; 
> 
<!-- ellipse -->
<!ELEMENT ellipse EMPTY> 
<!ATTLIST ellipse 
	%graphical-attr-extension; 
> 
<!-- simple point  --> 
<!ELEMENT point EMPTY> 
<!ATTLIST point 
	x CDATA #REQUIRED 
	y CDATA #REQUIRED 
> 
